// Include the generated module header.
// Vand_gate.h file is auto-generated by Verilator.
// It is the output of Verilator, i.e. the translation
// from Verilog to C++.
#include "VANDgate.h"
#include <iostream>
// Include Verilator library.
#include "verilated.h"

int main(int argc, char **argv)
{
    Verilated::commandArgs(argc, argv);   // Initialize Verilator.
    VANDgate* and_gate = new VANDgate;  // Create an instance of the AND gate module.

    // Apply test cases.
    and_gate->a = 0; and_gate->b = 0;
    and_gate->eval();   // Evaluate the model.
    std::cout << "a=0, b=0 -> y=" << (int)and_gate->y << std::endl;

    and_gate->a = 0; and_gate->b = 1;
    and_gate->eval();
    std::cout << "a=0, b=1 -> y=" << (int)and_gate->y << std::endl;

    and_gate->a = 1; and_gate->b = 0;
    and_gate->eval();
    std::cout << "a=1, b=0 -> y=" << (int)and_gate->y << std::endl;

    and_gate->a = 1; and_gate->b = 1;
    and_gate->eval();
    std::cout << "a=1, b=1 -> y=" << (int)and_gate->y << std::endl;

    delete and_gate;  // Free memory.
    return 0;
}
